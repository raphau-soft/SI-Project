{"version":3,"sources":["ng://angular-svg/lib/types/stroke.model.ts","ng://angular-svg/lib/types/vertex.model.ts","ng://angular-svg/lib/types/polygon.model.ts","ng://angular-svg/lib/types/polyline.model.ts","ng://angular-svg/lib/modules/svgcircle/svgcircle.component.ts","ng://angular-svg/lib/modules/svgcircle/svgcircle.module.ts","ng://angular-svg/lib/modules/svgellipse/svgellipse.component.ts","ng://angular-svg/lib/modules/svgellipse/svgellipse.module.ts","ng://angular-svg/lib/modules/svgline/svgline.component.ts","ng://angular-svg/lib/modules/svgline/svgline.module.ts","ng://angular-svg/lib/modules/svgpath/svgpath.component.ts","ng://angular-svg/lib/modules/svgpath/svgpath.module.ts","ng://angular-svg/lib/helpers/svghelper.service.ts","ng://angular-svg/lib/modules/svgpolygon/svgpolygon.component.ts","ng://angular-svg/lib/modules/svgpolygon/svgpolygon.module.ts","ng://angular-svg/lib/modules/svgpolyline/svgpolyline.component.ts","ng://angular-svg/lib/modules/svgpolyline/svgpolyline.module.ts","ng://angular-svg/lib/modules/svgrect/svgrect.component.ts","ng://angular-svg/lib/modules/svgrect/svgrect.module.ts","ng://angular-svg/lib/modules/svgtext/svgtext.component.ts","ng://angular-svg/lib/modules/svgtext/svgtext.module.ts"],"names":["Stroke","fill","strokeFill","dashArray","thickness","opacity","this","Vertex","x","y","Polygon","vertices","Array","Polyline","SvgCircleComponent","circleMousedown","EventEmitter","circleMouseover","prototype","ngOnInit","circle","stroke","onCircleMouseDown","$event","emit","mouseEvent","onCircleMouseOver","Component","args","selector","template","Input","Output","SvgCircleModule","NgModule","imports","CommonModule","declarations","exports","SvgEllipseComponent","ellipseMousedown","ellipseMouseover","ellipse","onEllipseMouseDown","onEllipseMouseOver","SvgEllipseModule","SvgLineComponent","lineMousedown","lineMouseover","line","onLineMouseDown","onLineMouseOver","SvgLineModule","SvgPathComponent","SvgPathModule","SvgHelper","getPolyPoints","points","map","p","toString","join","Injectable","SvgPolygonComponent","differs","svghelper","polygonMousedown","polygonMouseover","differ","find","create","polygon","isNullOrUndefined","pointsString","ngDoCheck","diff","onPolygonMouseDown","onPolygonMouseOver","KeyValueDiffers","SvgPolygonModule","providers","SvgPolylineComponent","polylineMousedown","polyline","onPolylineMouseDown","event","SvgPolylineModule","SvgRectComponent","rectangleMousedown","rectangle","onRectangleMouseDown","SvgrectModule","SvgTextComponent","SvgTextModule"],"mappings":"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","sourcesContent":["export class Stroke {\r\n    public fill: string;\r\n    public strokeFill: string;\r\n    public dashArray: number;\r\n    public stroke_linecap: string;\r\n    public thickness: number;\r\n    public opacity: number;\r\n\r\n    constructor(fill?: string, strokeFill?: string, dashArray?: number, thickness?: number, opacity?: number) {\r\n\r\n        this.fill = fill != null ? fill : 'transparent';\r\n        this.strokeFill = strokeFill != null ? strokeFill : 'black';\r\n        this.dashArray = dashArray != null ? dashArray : 0;\r\n        this.thickness = thickness != null ? thickness : 1;\r\n        this.opacity = opacity != null ? opacity : 1;\r\n    }\r\n}\r\n","export class Vertex {\r\n    public x: number;\r\n    public y: number;\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n","import { Stroke } from './stroke.model';\r\nimport { Vertex } from './vertex.model';\r\n\r\nexport class Polygon {\r\n    public vertices: Vertex[];\r\n    stroke: Stroke;\r\n    constructor() {\r\n        this.vertices = new Array<Vertex>();\r\n    }\r\n}\r\n","import { Stroke } from './stroke.model';\r\nimport { Vertex } from './vertex.model';\r\n\r\nexport class Polyline {\r\n    public vertices: Vertex[];\r\n    stroke: Stroke;\r\n    constructor() {\r\n        this.vertices = new Array<Vertex>();\r\n    }\r\n}\r\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { Circle, ElementEventClick, Stroke } from '../../types';\r\n\r\n@Component({\r\n  selector: 'g[svg-circle]',\r\n  templateUrl: './svgcircle.component.html',\r\n  styleUrls: ['./svgcircle.component.css']\r\n})\r\nexport class SvgCircleComponent implements OnInit {\r\n\r\n\r\n  constructor() { }\r\n\r\n\r\n  @Input()\r\n  public circle: Circle;\r\n\r\n  @Output()\r\n  public circleMousedown = new EventEmitter<{ mouseEvent: MouseEvent, circle: Circle }>();\r\n  @Output()\r\n  public circleMouseover = new EventEmitter<{ mouseEvent: MouseEvent, circle: Circle }>();\r\n\r\n\r\n  ngOnInit() {\r\n    if (!this.circle.stroke) {\r\n      this.circle.stroke = new Stroke();\r\n    }\r\n  }\r\n\r\n  public onCircleMouseDown($event) {\r\n    if ($event) {\r\n      this.circleMousedown.emit({ mouseEvent: $event, circle: this.circle });\r\n    }\r\n  }\r\n\r\n  public onCircleMouseOver($event) {\r\n    if ($event) {\r\n      this.circleMouseover.emit({ mouseEvent: $event, circle: this.circle });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgCircleComponent } from './svgcircle.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgCircleComponent],\n  exports: [SvgCircleComponent]\n})\nexport class SvgCircleModule { }\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Ellipse, ElementEventClick, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-ellipse]',\n  templateUrl: './svgellipse.component.html',\n  styleUrls: ['./svgellipse.component.css']\n})\nexport class SvgEllipseComponent implements OnInit {\n\n\n  constructor() { }\n\n\n  @Input()\n  public ellipse: Ellipse;\n\n  @Output()\n  public ellipseMousedown = new EventEmitter<{ mouseEvent: MouseEvent, ellipse: Ellipse }>();\n  @Output()\n  public ellipseMouseover = new EventEmitter<{ mouseEvent: MouseEvent, ellipse: Ellipse }>();\n\n  ngOnInit() {\n\n    if (!this.ellipse.stroke) {\n      this.ellipse.stroke = new Stroke();\n    }\n  }\n\n  public onEllipseMouseDown($event) {\n    if ($event) {\n      this.ellipseMousedown.emit({ mouseEvent: $event, ellipse: this.ellipse });\n    }\n\n  }\n  \n  public onEllipseMouseOver($event) {\n    if ($event) {\n      this.ellipseMouseover.emit({ mouseEvent: $event, ellipse: this.ellipse });\n    }\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgEllipseComponent } from './svgellipse.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgEllipseComponent],\n  exports: [SvgEllipseComponent]\n})\nexport class SvgEllipseModule { }\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Line, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-line]',\n  templateUrl: './svgline.component.html',\n  styleUrls: ['./svgline.component.css']\n})\nexport class SvgLineComponent implements OnInit {\n\n\n\n  constructor() { }\n\n\n  @Input()\n  public line: Line;\n\n  @Output()\n  public lineMousedown = new EventEmitter<{ mouseEvent: MouseEvent, line: Line }>();\n\n  @Output()\n  public lineMouseover = new EventEmitter<{ mouseEvent: MouseEvent, line: Line }>();\n\n  ngOnInit() {\n    if (!this.line.stroke) {\n      this.line.stroke = new Stroke();\n    }\n  }\n\n  public onLineMouseDown($event): void {\n    if ($event) {\n      this.lineMousedown.emit({ mouseEvent: $event, line: this.line });\n    }\n  }\n\n  public onLineMouseOver($event): void {\n    if ($event) {\n      this.lineMouseover.emit({ mouseEvent: $event, line: this.line });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgLineComponent } from './svgline.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgLineComponent],\n  exports: [SvgLineComponent]\n})\nexport class SvgLineModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-path]',\n  templateUrl: './svgpath.component.html',\n  styleUrls: ['./svgpath.component.css']\n})\nexport class SvgPathComponent implements OnInit {\n\n  constructor() { }\n\n\n  @Input()\n  public path: string;\n\n  @Input()\n  public stroke: Stroke;\n\n  ngOnInit() {\n    if (!this.stroke) {\n      this.stroke = new Stroke();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgPathComponent } from './svgpath.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgPathComponent],\n  exports: [SvgPathComponent]\n})\nexport class SvgPathModule { }\n","import { Injectable } from '@angular/core';\r\nimport { Vertex } from '../types';\r\n\r\n@Injectable()\r\nexport class SvgHelper {\r\n\r\n    public getPolyPoints(points: Vertex[]): string {\r\n        return points.map(p => p.x.toString() + ' ' + p.y.toString()).join(' ');\r\n    }\r\n}\r\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  DoCheck,\n  KeyValueDiffers\n} from \"@angular/core\";\nimport { Polygon, Stroke } from \"../../types\";\nimport { isNullOrUndefined } from \"util\";\nimport { SvgHelper } from \"../../helpers/svghelper.service\";\n\n@Component({\n  selector: \"g[svg-polygon]\",\n  templateUrl: \"./svgpolygon.component.html\",\n  styleUrls: [\"./svgpolygon.component.css\"]\n})\nexport class SvgPolygonComponent implements OnInit, DoCheck {\n  differ: any;\n\n  constructor(private differs: KeyValueDiffers, private svghelper: SvgHelper) {\n    this.differ = this.differs.find({}).create();\n  }\n\n  @Input()\n  public pointsString;\n\n  @Input()\n  public polygon: Polygon;\n\n  @Output()\n  public polygonMousedown = new EventEmitter<{\n    mouseEvent: MouseEvent;\n    polygon: Polygon;\n  }>();\n\n  @Output()\n  public polygonMouseover = new EventEmitter<{\n    mouseEvent: MouseEvent;\n    polygon: Polygon;\n  }>();\n\n  ngOnInit() {\n    if (this.polygon && isNullOrUndefined(this.pointsString)) {\n      this.pointsString = this.svghelper.getPolyPoints(this.polygon.vertices);\n    }\n    if (!this.polygon.stroke) {\n      this.polygon.stroke = new Stroke();\n    }\n  }\n\n  ngDoCheck() {\n    const changes = this.differ.diff(this.polygon);\n\n    if (changes) {\n      this.pointsString = this.svghelper.getPolyPoints(this.polygon.vertices);\n    }\n  }\n\n  public onPolygonMouseDown($event: any): void {\n    if ($event) {\n      this.polygonMousedown.emit({ mouseEvent: $event, polygon: this.polygon });\n    }\n  }\n\n  public onPolygonMouseOver($event: any): void {\n    if ($event) {\n      this.polygonMouseover.emit({ mouseEvent: $event, polygon: this.polygon });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgPolygonComponent } from './svgpolygon.component';\nimport { SvgHelper } from '../../helpers/svghelper.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgPolygonComponent],\n  exports: [SvgPolygonComponent],\n  providers: [SvgHelper]\n})\nexport class SvgPolygonModule { }\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  KeyValueDiffers,\n  DoCheck\n} from '@angular/core';\nimport { Polyline, Stroke } from '../../types';\nimport { SvgHelper } from '../../helpers/svghelper.service';\n\n@Component({\n  selector: 'g[svg-polyline]',\n  templateUrl: './svgpolyline.component.html',\n  styleUrls: ['./svgpolyline.component.css']\n})\nexport class SvgPolylineComponent implements OnInit, DoCheck {\n  differ: any;\n\n  constructor(private differs: KeyValueDiffers, private svghelper: SvgHelper) {\n    this.differ = this.differs.find({}).create();\n  }\n\n  @Input()\n  public pointsString;\n\n  @Input()\n  public polyline: Polyline;\n\n  @Output()\n  public polylineMousedown = new EventEmitter<{\n    mouseEvent: MouseEvent;\n    polyline: Polyline;\n  }>();\n\n  ngOnInit() {\n    if (this.polyline) {\n      this.pointsString = this.svghelper.getPolyPoints(this.polyline.vertices);\n    }\n    if (!this.polyline.stroke) {\n      this.polyline.stroke = new Stroke();\n    }\n  }\n\n  ngDoCheck() {\n    const changes = this.differ.diff(this.polyline);\n\n    if (changes) {\n      this.pointsString = this.svghelper.getPolyPoints(this.polyline.vertices);\n    }\n  }\n\n  public onPolylineMouseDown(event): void {\n    if (event) {\n      this.polylineMousedown.emit({\n        mouseEvent: event,\n        polyline: this.polyline\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgPolylineComponent } from './svgpolyline.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgPolylineComponent],\n  exports: [SvgPolylineComponent]\n})\nexport class SvgPolylineModule { }\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Rectangle, ElementEventClick, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-rect]',\n  templateUrl: './svgrect.component.html',\n  styleUrls: ['./svgrect.component.css']\n})\nexport class SvgRectComponent implements OnInit {\n\n\n  constructor() { }\n\n\n  @Input()\n  public rectangle: Rectangle;\n\n  @Output()\n  public rectangleMousedown = new EventEmitter<{ mouseEvent: MouseEvent, rectangle: Rectangle }>();\n\n  ngOnInit() {\n    if (!this.rectangle.stroke) {\n      this.rectangle.stroke = new Stroke();\n    }\n  }\n\n  public onRectangleMouseDown($event) {\n    if ($event) {\n      this.rectangleMousedown.emit({ mouseEvent: $event, rectangle: this.rectangle });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgRectComponent } from './svgrect.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgRectComponent],\n  exports: [SvgRectComponent]\n})\nexport class SvgrectModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { TextFont} from '../../types';\n\n@Component({\n  selector: 'g[svg-text]',\n  templateUrl: './svgtext.component.html',\n  styleUrls: ['./svgtext.component.css']\n})\nexport class SvgTextComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  public x: number;\n\n  @Input()\n  public y: number;\n\n  @Input()\n  public transform: number;\n\n  @Input()\n  public fontStyle: TextFont;\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgTextComponent } from './svgtext.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgTextComponent],\n  exports: [SvgTextComponent]\n})\nexport class SvgTextModule { }\n"]}